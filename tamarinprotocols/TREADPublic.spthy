/* Implementation of the TREAD-public key distance bounding protocol */
/* Demonstrating the DB-secure property */

theory treadpublic

begin

builtins: asymmetric-encryption, signing

functions: f/4

// -------------------- Tag Initialization -------------------- //

    // A tag is registered as a public key/private key pair

rule Register_Keypair:
  [ Fr(~key) ]
--[ KeyGen($P, ~key) ,Once($P), Prelim()]->
  [ !PubKey($P, pk(~key)), !SecKey($P, ~key), Out(pk(~key)) ]

    // Verifiers are registered using the same rule, but with different
    // fact names, to differentiate them

rule Register_VKeypair:
  [ Fr(~key) ]
--[ KeyGen($P, ~key) ,Once($V), Prelim()]->
  [ !VPubKey($V, pk(~key)), !VSecKey($V, ~key), Out(pk(~key)) ]

// -------------------- Corrupted Agent Rules ---------------- //

    // Rules for corrupting a prover or verifier

rule Corrupt_Verifier:
  [ !VSecKey($V, key) ]
--[ Corrupt($V), Prelim() ]->
  [ Out(key) ]

rule Corrupt_Prover:
  [ !SecKey($P, key) ]
--[ Corrupt($P), Prelim() ]->
  [ Out(key), !CorruptAgent($P) ]

    // The adversary can only interact with the network using the In() and Out() facts:
    // The FastMsg fact is used for messages sent during the fast phase.
    // If the adversary wants to send a message in the fast phase, they have to use a corrupted
    // prover as a "voice"

rule Corrupt_Fast:
  [ !CorruptAgent($P), In(msg) ]
--[ CAction($P), Action($P) ]->
  [ FastMsg(msg) ]

// -------------------- Protocol Rules -------------------- //

  // The prover P builds a message consisting of two pieces of state
  // data and his identity, then signs it

rule Prover_1:
  let msg = < ~alpha, ~beta, $P >
  in
  [ Fr(~alpha), Fr(~beta), !SecKey($P, key), !VPubKey($V, pk) ]
--[ ProverOne($P, $V, ~alpha, ~beta), Action($P) ]->
  [ Out( aenc(< msg, sign(msg, key) >, pk) ), ProverStart($P, $V, ~alpha, ~beta) ]

  // The Verifier receives a message from P and verifies
  // that it is from him. He opens a session and sends the
  // first part of his challenge, m.

rule Verifier_1:
  let msg_in = < alpha, beta, $P >
      sig_ver = verify(sig_in, msg_in, pk)
  in
  [ Fr(~m), In( aenc(< msg_in, sig_in >, pk(sk)) ), !PubKey($P, pk), !VSecKey($V, sk) ]
--[ VerifOne($P, $V, alpha, beta, ~m), Eq(sig_ver, true) ]->
  [ Out( ~m ), VerifStart($P, $V, alpha, beta, ~m) ]

  // The verifier uses this stored session to start the fast phase
  // using challenge nonce c

rule Verifier_2:
  [ VerifStart($P, $V, alpha, beta, m), Fr(~c) ]
--[ VerifierTwo($P, $V, alpha, beta, m, ~c), StartFastPhase($P, $V, alpha, beta, m, ~c) ]->
  [ Out(~c), VerifierChallenge($P, $V, alpha, beta, m, ~c) ]

  // The prover responds by sending a function of the two initial
  // nonces and the two challenge nonces

rule Prover_2:
  [ In(m), In(c), ProverStart($P, $V, alpha, beta) ]
--[ ProverTwo($P, $V, alpha, beta, m, c), Action($P)]->
  [ FastMsg( f(alpha, beta, m, c) ) ]

  // The verifier ends the fast phase and checks everything lines up

rule Verifier_3:
  [ FastMsg( f(alpha, beta, m, c) ), VerifierChallenge($P, $V, alpha, beta, m, c) ]
--[ EndFastPhase($P, $V, alpha, beta, m, c), VerifierComplete($P, $V, alpha, beta, m, c) ]->
  []

// ------------------- Axioms -------------------------- //

  // An agent may only have one keypair

axiom at_most_once:
    "
    All A #t1 #t2. Once(A)@t1 & Once(A)@t2 ==>
        (
        #t1 = #t2
        )
    
    
    "

axiom equality:
    "
    All a b #t1. Eq(a, b)@t1 ==> a = b
    "

// -------------------- Sanity Check Lemmas -------------------- //

  // These lemmas check that certain points in the trace are reachable.
  // They're useful to check that the protocol has been correctly implemented
  // but are not necessary for the analysis

lemma verif1_exists:
    exists-trace
  "
    Ex P V alpha beta m #t. (
        VerifOne(P, V, alpha, beta, m)@t )
  "

lemma prover1_exists:
    exists-trace
  "
    Ex P V alpha beta #t. (
        ProverOne(P, V, alpha, beta)@t )

  "

lemma verif2_exists:
    exists-trace
  "
    Ex P V alpha beta m c #t. (
        VerifierTwo(P, V, alpha, beta, m, c)@t )

  "

lemma prover2_exists:
    exists-trace
  "
    Ex P V alpha beta m c #t. (
        ProverTwo(P, V, alpha, beta, m, c)@t )

  "

lemma finish_exists:
    exists-trace
  "
   ( Ex P V alpha beta m c #t. (
        VerifierComplete(P, V, alpha, beta, m, c)@t )
    & not (Ex P #t1. Corrupt(P)@t1 )
   )

  "

// -------------------- Security Lemmas -------------------- //

lemma dbsec:
  "
  All P V alpha beta m c #t. (
    VerifierComplete(P, V, alpha, beta, m, c)@t ) ==>                   // Whenever the verifier is complete EITHER:
    (
      Ex #t0. Corrupt(V)@t0
    )|  
    (                                                         
      Ex #t1 #t2 #t3. StartFastPhase(P, V, alpha, beta, m, c)@t1 &              //  2) There exists t1, t2 and t3 such that
                  Action(P)@t2 &                              //          The fast phase was between t1 and t3
                  EndFastPhase(P, V, alpha, beta, m, c)@t3 &            //          and the prover did something between those two times
                  (#t1 < #t2) &                               //          and the verifier completed at or after the
                  (#t2 < #t3) &                               //          end of the fast phase OR
                  ( (#t3 < #t ) | (#t3 = #t) )
    )|
    (              
      Ex CAgent #t4 #t5 #t6 #t7. StartFastPhase(P, V, alpha, beta, m, c)@t5 &    //  3) There exist times t5, t6 and t7 such that
                             EndFastPhase(P, V, alpha, beta, m, c)@t7 & //        The fast phase was between t5 and t7
                             Corrupt(P)@t4 &             //        and the prover P is dishonest
                             CAction(CAgent)@t6 &             //        and some dishonest agent did something during
                             (#t5 < #t6)&                     //        the fast phase
                             (#t6 < #t7)&                     //        and the verifier completed at or after the
                             ( (#t7 < #t) | (#t7 = #t) )      //        end of the fast phase 
    ) 
  "


end
