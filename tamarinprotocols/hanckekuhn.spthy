/* Implementation of the Hancke-Kuhn distance bounding protocol */
/* Demonstrating the DB-secure property */

theory hk

begin

functions: h/1

// -------------------- Tag Initialization -------------------- //

    // Rule for registering a prover/verifier. We create "agent" facts
    // Because the verifier doesn't necessarily know his communication partner
    // When he sends his first message (but we want to track V's session)
rule Register_Keypair:
  [ Fr(~key) ]
--[ KeyGen($A, $V, ~key) ,Once($A, $V), Prelim()]->
  [ !SharedKey($A, $V, ~key), !Agent($A), !Agent($V) ]

// -------------------- Corrupted Agent Rules ---------------- //

    // There's a small difference between a corrupted prover and a corrupted
    // verifier, that comes into play when we make our security claim later.
    // This is a consequence of differences between prover impersonation and
    // verifier impersonation attacks

rule Corrupt_Prover:
  [ !SharedKey($A, $V, key) ]
--[ Corrupted($A, $V), Prelim(), Corrupt($A) ]->
  [ Out(key), !CorruptAgent($A) ]

rule Corrupt_Verifier:
  [ !SharedKey($A, $V, key) ]
--[ Corrupt($V), Prelim() ]->
  [ Out(key) ]

    // The adversary can only interact with the network using the In() and Out() facts:
    // The FastMsg fact is used for messages sent during the fast phase.
    // If the adversary wants to send a message in the fast phase, they have to use a corrupted
    // prover as a "voice"
rule Corrupt_Fast:
  [ !CorruptAgent($A), In(msg) ]
--[ CAction($A), Action($A) ]->
  [ FastMsg(msg) ]

// -------------------- Protocol Rules -------------------- //

  // The verifier V sends the nonce msg, as well as their own name

rule Verifier_1:
  [ Fr(~msg), !Agent($V) ]
--[ VerifierOne($V, ~msg) ]->
  [ Out(<~msg, $V>), VerifierStart($V, ~msg) ]

  // The prover receives a message from V, with whom he has a shared key
  // He replies by sending a nonce n of his own

rule Prover_1:
  [ Fr(~n), In(<m, $V>), !SharedKey($P, $V, key) ]
--[ ProverOne($P, $V, m, ~n), Action($P) ]->
  [ Out(<~n, $P>), ProverStart($P, $V, m, ~n)]

  // The verifier sees they are talking with P, whom they share a key
  // They send a fresh challenge and signal the start of the fast phase

rule Verifier_2:
  [ Fr(~c), In(<n, $P>), !SharedKey($P, $V, key), VerifierStart($V, m)]
--[ VerifierTwo($P, $V, m, n, ~c), StartFastPhase($P, $V, m, n, ~c) ]->
  [ Out(~c), VerifierChallenge($P, $V, m, n, ~c) ]

  // The prover responds by sending a hash of all the nonces sent so far
  // as well as the shared key between them and V

rule Prover_2:
  [ In(c), ProverStart($P, $V, m, n), !SharedKey($P, $V, key) ]
--[ ProverTwo($P, $V, m, n, c), Action($P)]->
  [ FastMsg(h(<key, m, n, c>)) ]

  // The verifier ends the fast phase and checks everything lines up

rule Verifier_3:
  [ FastMsg(h(<key, m, n, c>)), !SharedKey($P, $V, key), VerifierChallenge($P, $V, m, n, c) ]
--[ EndFastPhase($P, $V, m, n, c), VerifierComplete($P, $V, m, n, c) ]->
  []

// ------------------- Axioms -------------------------- //

  // A given pair of agents can only have keypair between them

axiom at_most_once:
    "
    All A V #t1 #t2. Once(A, V)@t1 & Once(A, V)@t2 ==>
        (
        #t1 = #t2
        )
    
    
    "

  // Key initialization rules always take place before protocol rules
  // This restriction is not necessary, but helps tidy up the trace
  // and slightly tightens the security requirement
  
axiom prelims_first:
    "
    All A #t1 #t2. Prelim()@t1 & Action(A)@t2 ==>
    (
        t1 < t2
    )

    "    

// -------------------- Sanity Check Lemmas -------------------- //

  // These lemmas check that certain points in the trace are reachable.
  // They're useful to check that the protocol has been correctly implemented
  // but are not necessary for the analysis

lemma verif1_exists:
    exists-trace
  "
    Ex V msg #t. (
        VerifierOne( V, msg )@t )
  "

lemma prover1_exists:
    exists-trace
  "
    Ex P V m n #t. (
        ProverOne(P, V, m, n)@t )

  "

lemma verif2_exists:
    exists-trace
  "
    Ex P V m n c #t. (
        VerifierTwo(P, V, m, n, c)@t )

  "

lemma prover2_exists:
    exists-trace
  "
    Ex P V m n c #t. (
        ProverTwo(P, V, m, n, c)@t )

  "

lemma finish_exists:
    exists-trace
  "
   ( Ex P V m n c #t. (
        VerifierComplete(P, V, m, n, c)@t )
   ) &
	not( Ex A B #t1. Corrupted(A, B)@t1 )
  "

// -------------------- Security Lemmas -------------------- //

lemma dbsec:
  "
  All P V m n c #t. (
    VerifierComplete(P, V, m, n, c)@t ) ==>                   // Whenever the verifier is complete EITHER:
    (Ex #tc. Corrupt(V)@tc)|                                  //  1) The verifier is corrupt OR
    (                                                         
      Ex #t1 #t2 #t3. StartFastPhase(P, V, m, n, c)@t1 &              //  2) There exists t1, t2 and t3 such that
                  Action(P)@t2 &                              //          The fast phase was between t1 and t3
                  EndFastPhase(P, V, m, n, c)@t3 &            //          and the prover did something between those two times
                  (#t1 < #t2) &                               //          and the verifier completed at or after the
                  (#t2 < #t3) &                               //          end of the fast phase OR
                  ( (#t3 < #t ) | (#t3 = #t) )
    )|
    (              
      Ex CAgent #t4 #t5 #t6 #t7. StartFastPhase(P, V, m, n, c)@t5 &    //  3) There exist times t5, t6 and t7 such that
                             EndFastPhase(P, V, m, n, c)@t7 & //        The fast phase was between t5 and t7
                             Corrupted(P, V)@t4 &             //        and the prover P is dishonest
                             CAction(CAgent)@t6 &             //        and some dishonest agent did something during
                             (#t5 < #t6)&                     //        the fast phase
                             (#t6 < #t7)&                     //        and the verifier completed at or after the
                             ( (#t7 < #t) | (#t7 = #t) )      //        end of the fast phase 
    ) 
  "


end
